<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Project/register.http">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Project/register.http" />
              <option name="originalContent" value="POST http://localhost:3000/api/driver/register&#10;&#10;{&#10;    &quot;fullName&quot;: &quot;Carlos Rodrigo Briseño Ruiz&quot;,&#10;    &quot;email&quot;: &quot;c4rlosruiz01@gmail.com&quot;,&#10;    &quot;password&quot;: &quot;Ironmanesel#1&quot;,&#10;    &quot;currentTrip&quot;: {&#10;        &quot;type&quot;: &quot;Point&quot;,&#10;        &quot;coordinates&quot;: [-99.1332, 19.4326]&#10;    },&#10;    &quot;currentLocation&quot;: {&#10;        &quot;type&quot;: &quot;Point&quot;,&#10;        &quot;coordinates&quot;: [-99.1332, 19.4325]&#10;    },&#10;    &quot;isOnline&quot;: true,&#10;    &quot;vehicle&quot;: {&#10;        &quot;brand&quot;: &quot;Chevrolet&quot;,&#10;        &quot;model&quot;: &quot;Corvette&quot;,&#10;        &quot;year&quot;: 2020,&#10;        &quot;licensePlate&quot;: &quot;ABC1234&quot;,&#10;        &quot;capacity&quot;: 2&#10;    }&#10;}" />
              <option name="updatedContent" value="POST http://localhost:3000/api/driver/register&#10;Content-Type: application/json&#10;&#10;{&#10;    &quot;fullName&quot;: &quot;Carlos Rodrigo Briseño Ruiz&quot;,&#10;    &quot;email&quot;: &quot;c4rlosruiz01@gmail.com&quot;,&#10;    &quot;password&quot;: &quot;Ironmanesel#1&quot;,&#10;    &quot;currentTrip&quot;: {&#10;        &quot;type&quot;: &quot;Point&quot;,&#10;        &quot;coordinates&quot;: [-99.1332, 19.4326]&#10;    },&#10;    &quot;currentLocation&quot;: {&#10;        &quot;type&quot;: &quot;Point&quot;,&#10;        &quot;coordinates&quot;: [-99.1332, 19.4325]&#10;    },&#10;    &quot;isOnline&quot;: true,&#10;    &quot;vehicle&quot;: {&#10;        &quot;brand&quot;: &quot;Chevrolet&quot;,&#10;        &quot;model&quot;: &quot;Corvette&quot;,&#10;        &quot;year&quot;: 2020,&#10;        &quot;licensePlate&quot;: &quot;ABC1234&quot;,&#10;        &quot;capacity&quot;: 2&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Project/src/routes/driver.routes.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Project/src/routes/driver.routes.js" />
              <option name="originalContent" value="import express, {Router} from &quot;express&quot;;&#10;import {&#10;    register,&#10;    login,&#10;    logout,&#10;    profile,&#10;    updateLocation&#10;} from &quot;../controllers/driver.controller.js&quot;;&#10;import {authRequiered} from &quot;../middlewares/validateToken.js&quot;;&#10;import {validateSchema} from &quot;../middlewares/validator.middleware.js&quot;;&#10;import {&#10;    loginSchema,&#10;    driverSchema,&#10;    updateLocationSchema&#10;} from &quot;../schemas/driver.schema.js&quot;;&#10;import multer from &quot;multer&quot;;&#10;&#10;const storage = multer.memoryStorage();&#10;const upload = multer({storage});&#10;const download = multer({storage: storage});&#10;&#10;const router = Router();&#10;&#10;router.post(&#10;    &quot;/register&quot;,&#10;    upload.single(&quot;photo&quot;),&#10;    // validateSchema(driverSchema),&#10;    register&#10;);&#10;&#10;router.post(&#10;    &quot;/login&quot;,&#10;    express.json(),&#10;    validateSchema(loginSchema),&#10;    login&#10;);&#10;&#10;router.post(&#10;    &quot;/logout&quot;,&#10;    logout&#10;);&#10;&#10;router.get(&#10;    &quot;/profile&quot;,&#10;    express.json(),&#10;    authRequiered,&#10;    profile&#10;);&#10;&#10;router.get(&#10;    &quot;/photo&quot;,&#10;    download.single(&quot;photo&quot;),&#10;    (req, res) =&gt; {&#10;        if (!req.file) {&#10;            return res.status(404).json({message: &quot;Photo not found&quot;});&#10;        }&#10;        res.set(&quot;Content-Type&quot;, req.file.mimetype);&#10;        res.send(req.file.buffer);&#10;    }&#10;);&#10;&#10;router.put(&quot;/update-location&quot;,&#10;    express.json(),&#10;    authRequiered,&#10;    validateSchema(updateLocationSchema),&#10;    updateLocation&#10;);&#10;&#10;export default router;" />
              <option name="updatedContent" value="import express, {Router} from &quot;express&quot;;&#10;import {&#10;    register,&#10;    login,&#10;    logout,&#10;    profile,&#10;    updateLocation&#10;} from &quot;../controllers/driver.controller.js&quot;;&#10;import {authRequiered} from &quot;../middlewares/validateToken.js&quot;;&#10;import {validateSchema} from &quot;../middlewares/validator.middleware.js&quot;;&#10;import {&#10;    loginSchema,&#10;    driverSchema,&#10;    updateLocationSchema&#10;} from &quot;../schemas/driver.schema.js&quot;;&#10;import multer from &quot;multer&quot;;&#10;&#10;const storage = multer.memoryStorage();&#10;const upload = multer({storage});&#10;const download = multer({storage: storage});&#10;&#10;const router = Router();&#10;&#10;console.log(&quot;[ROUTE] /api/driver/register route loaded&quot;);&#10;&#10;router.post(&#10;    &quot;/register&quot;,&#10;    upload.single(&quot;photo&quot;),&#10;    // validateSchema(driverSchema),&#10;    register&#10;);&#10;&#10;router.post(&#10;    &quot;/login&quot;,&#10;    express.json(),&#10;    validateSchema(loginSchema),&#10;    login&#10;);&#10;&#10;router.post(&#10;    &quot;/logout&quot;,&#10;    logout&#10;);&#10;&#10;router.get(&#10;    &quot;/profile&quot;,&#10;    express.json(),&#10;    authRequiered,&#10;    profile&#10;);&#10;&#10;router.get(&#10;    &quot;/photo&quot;,&#10;    download.single(&quot;photo&quot;),&#10;    (req, res) =&gt; {&#10;        if (!req.file) {&#10;            return res.status(404).json({message: &quot;Photo not found&quot;});&#10;        }&#10;        res.set(&quot;Content-Type&quot;, req.file.mimetype);&#10;        res.send(req.file.buffer);&#10;    }&#10;);&#10;&#10;router.put(&quot;/update-location&quot;,&#10;    express.json(),&#10;    authRequiered,&#10;    validateSchema(updateLocationSchema),&#10;    updateLocation&#10;);&#10;&#10;export default router;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>